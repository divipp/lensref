% Introduction to state-based FRP
% *Draft*


# Motivation

## Stream-based FRP

Interactive programs can be described as stream transformers.
For example, interactive programs with a graphical user interface (GUI) can be described
as stream transformers with keyboard and mouse events as input streams
and a continuously changing screen as an output stream:

~~~~~~~~ {.dot size=2}
digraph G {
    rankdir = BT
    box [label = "stream\ntransformer", shape = rect]
    node [style = invis, shape= point]
    mouse -> box [label="mouse\nevents"]
    keyboard -> box [label="keyboard\nevents"]
    box -> screen [label="screen\nstream"]
}
~~~~~~~~

The goal of *functional reactive programming* (FRP) is to declaratively describe
interactive programs. Declarative descriptions are composable which
means that FRP descriptions of interactive
programs can be decomposed into FRP descriptions of simpler interactive programs.

Most declarative descriptions of interactive programs is built around
event streams and stream transformers equipped with different
combinators like horizontal and vertical composition.
Let us call these systems *stream-based FRP* systems.


## State-based FRP

Stream-based FRP is not the only possible way to declaratively describe interactive programs.

In case of interactive programs with a GUI it is possible to describe the program state,
to describe how mouse and keyboard events alter the program state and
to project the program state onto the screen:

~~~~~~~~ {.dot size=2}
digraph G {
    rankdir = BT
    box [label = "program\nstate", shape=ellipse]
    screen [label = "screen"]
    node [style = invis, shape= point]
    box -> box [label=""]
    box -> box [label="mouse events\nkeyboard events"]
    box -> screen [label="projection"]
}
~~~~~~~~

It is not obvious to generalize this scheme to arbitrary
interactive programs, and to decompose it into simpler similar parts.
Let us call *state-based FRP* a system characterized by this goal.

State-based FRP is an alternative to stream-based FRP systems.
In many cases, state-based FRP decomposition of interactive programs is simpler
than their stream-based FRP decomposition.

This document gives an introduction to state-based FRP as implemented
in the `lensref` package[^lensref].

[^lensref]: [http://hackage.haskell.org/package/lensref](http://hackage.haskell.org/package/lensref)



# Basic operations on references

The interface of `lensref` is built around the reference data type.
This section defines an interface of basic reference operations. We
add new operations step-by-step to this interface in the following sections.

## The reference data type

A *reference* is an editable view of the program state.

Each reference has a *context*. The context tells
what kind of effects may happen during reference write, for example.
It also helps to distinguish references created in different regions.
Not every reference context is valid; the `RefContext` type class classifies
valid reference contexts:

> -- reference contexts
> class Monad m => RefContext m
>
> instance RefContext IO
> instance RefContext (ST s)
> instance RefContext m => RefContext (ReaderT r m)
> instance (RefContext m, Monoid w) => RefContext (WriterT w m)
> ...

A reference has an associated *value* for each program state.

The type of a reference is determined by the type of its context and the type of its values:

> -- abstract data type of references
> data RefContext m => Ref m a

## Interface of the basic operations

The basic reference operations are *reference reading*,
*reference writing* and *reference creation*.
The interface of the basic reference operations is the following:

> -- reference read action
> readRef  :: RefContext m =>  Ref m a -> RefReader m a
> -- reference write action
> writeRef :: RefContext m =>  Ref m a -> a -> RefWriter m ()
> -- new reference creation action
> newRef   :: RefContext m =>  a -> RefCreator m (Ref m a)
>
> data RefReader  m a  -- reference reader computation
> data RefWriter  m a  -- reference writer computation
> data RefCreator m a  -- reference creator computation
>
> instance RefContext m => Monad (RefReader m)
> instance RefContext m => Monad (RefWriter m)
> instance RefContext m => Monad (RefCreator m)
>
> instance MonadTrans RefWriter
> instance MonadTrans RefCreator
>
> readerToWriter  :: RefContext m => RefReader m a -> RefWriter  m a
> readerToCreator :: RefContext m => RefReader m a -> RefCreator m a

Reference reading returns the value of a reference for any program state.
Given a reference `(r :: Ref m a)` and a value `(x :: a)`,
reference writing changes the program state such that the value of `r` in
the changed state will be `x`.[^write]
Given a value `(x :: a)`, new reference creation extends the program state with
a new `a`-typed field initialized with `x`
and returns a reference whose value is always the value of the new field in the program state.

[^write]: This is an incomplete definition of reference writing because
it does not define how reference writing changes the values of other references.
We leave this question open for now.

Reference reader, writer and creator computations are abstract data types with `Functor`, `Applicative` and `Monad` instances
(declaration of `Functor` and `Applicative` instances was left implicit for brevity).
`RefWriter` and `RefCreator` are monad transformers. `RefReader` is
not a monad transformer because no side effect is allowed during reference reading.

Reference writer and creator computations may involve reference reader computations:
`readerToWriter` lifts reference reader computations to reference writer computations;
`readerToCreator` lifts reference reader computations to reference creator computations.


### On reference reader computations

Any `RefReader` computation has an associated value for each program state, its
return value.
Moreover, `RefReader` is isomorphic to the `Reader` monad (see later) so a `RefReader`
computation is characterized by its associated values.
Therefore a `RefReader` computation is a non-editable view of the
program state i.e. a *read-only reference*.

Non-editable views (reference reader computations) and editable views
(references) of the program state are called *views*.

A reference reader computation can also be seen as a dynamic value.
For example, an `Int` value is a static integer whilst a `(RefReader Int)` value
is a dynamically changing integer. Dynamic values contain static values: `(pure 3 :: RefReader Int)` is
a static dynamically changing integer.

Reference reader computations are closely related to signals in stream-based FRP.
Notice the difference. A signal is a time-varying value whilst
a reference reader computation is a state-varying value.
Although the program state varies by time, a state-varying value
is not the same as a time-varying value because the program may have the
same state in different time positions.


## Laws

The following laws are part of the interface.

### Law 1: write-read

Let `(r :: Ref m a)` be a reference and `(x :: a)` a value.
Reading `r` after writing `x` into it returns `x`, i.e.
the following expressions have the same behaviour:[^behaviour]

~~~~~ {.haskell}
writeRef r x >> readerToWriter (readRef r)
    ~       -- write-read
writeRef r x >> return x
~~~~~

[^behaviour]: We say that two expressions has the same behaviour if they are
replaceable in any context without changing the functional properties of the program
(difference in resource usage is possible).

The write-read law is analogue to the set-get law for lenses.
The following laws which are analogue to the get-set and set-set lens laws are **not required** in the `lensref` library.

The read-write law is **not required**:

~~~~~ {.haskell}
readerToWriter (readRef r) >>= writeRef r
    ~       -- read-write
return ()
~~~~~

The write-write law is **not required**:

~~~~~ {.haskell}
writeRef r x' >> writeRef r x
    ~       -- write-write
writeRef r x
~~~~~


### Law 2: `RefReader` has no side effects

Let `(m :: RefReader m a)`. `m` has no side effects, i.e.
the following expressions have the same behaviour:

~~~~~ {.haskell}
m >> return ()
    ~       -- RefReader-no-side-effect
return ()
~~~~~


### Law 3: `RefReader` is idempotent

Let `(m :: RefReader m a)`. Multiple execution of `m` is the same as one execution of `m`, i.e.
the following expressions have the same behaviour:

~~~~~ {.haskell}
liftM2 (,) m m
    ~       -- RefReader-idempotent
liftM (\a -> (a, a)) m
~~~~~

Laws 2 and 3 together implies that `RefReader` has no effects,
i.e. it is isomorphic to the `Reader` monad.[^indep]

[^indep]: [http://stackoverflow.com/questions/16123588/what-is-this-special-functor-structure-called](http://stackoverflow.com/questions/16123588/what-is-this-special-functor-structure-called)


### Law 4: `RefCreator` has no extra side effects

Let `(c :: RefCreator m a)`. `c` has no side effects if `m` has no side effects, i.e.
if

~~~~~ {.haskell}
m >> return ()
    ~
return ()
~~~~~

holds for all `(m :: m)` then

~~~~~ {.haskell}
c >> return ()
    ~       -- RefCreator-no-side-effect
return ()
~~~~~

Law 4 is similar to law 2 but stated for the `RefCreator` monad instead of `RefReader`
and with and extra condition for the reference context.

Note unlike `RefReader`, `RefCreator` is not idempotent.
For example, `(liftM2 (,) (newRef 14) (newRef 14))` and
`(liftM (\a -> (a, a)) (newRef 14))` has different behaviour since
the former creates two distinct references whilst the latter creates two entangled references.

## Derived constructs: `writeRefDyn`, `modRef`

`writeRef` can be generalized such that the written value is
a `RefReader` value:

> writeRefDyn :: Ref m a -> RefReader m a -> RefWriter m ()
> writeRefDyn r m = readerToWriter m >>= writeRef r

`writeRefDyn` alone is enough to construct the needed `RefWriter` computations in many cases.

Another derived construct, `modRef` can be expressed in terms of `writeRefDyn`:

> modRef :: RefContext m => Ref m a -> (a -> a) -> RefWriter m ()
> modRef r f = writeRefDyn r $ fmap f $ readRef r



## Running `RefCreator`

`lensref` exposes the following function:

> runRefCreator
>     :: RefContext m
>     => ((forall b . RefWriter m b -> m b) -> RefCreator m a)
>     -> m a

`runRefCreator` turns a `(RefCreator m a)` computation into an `(m a)` computation.
During the creation of the `(RefCreator m a)` value it is possible
to turn any `(RefWriter m b)` computation into an `(m b)` computation.

### Safety of `runRefCreator`

`runRefCreator` is an unsafe function because it is possible to implement a restricted form of
`unsafeCoerce` with it.[^unsafecreator]
`lensref` exposes `runRefCreator` because of the following reasons:

[^unsafecreator]: TODO

-   There is a trade-off between the safety of `runRefCreator` and the complexity of its interface.
-   There are two easy rules to follow to keep the current `runRefCreator` safe:
    -   Call `runRefCreator` only once in your program.
        This rule seems quite restrictive but `lensref` is designed such
        that one call of `runRefCreator` is enough in most use cases.
        A relaxed form of this rule is that do not allow to interact references created
        with different `runRefCreator` calls.
    -   Use `runRefCreator` in a single-threaded environment.
-   A thread-safe variant and/or a
    multiple-call-safe variant of `runRefCreator` can be defined in terms of the current
    `runRefCreator` function. See ... TODO


## Examples

For running basic tests we defined a specialized form of `runRefCreator`:

> runRefTest :: (forall s . RefCreator (ST s) (RefWriter (ST s) a)) -> a
> runRefTest m
>     = runST $ join $ runRefCreator $ \runRW -> m <&> runRW

Note that `runRefTest` is a safe function (unlike `runRefCreator`).

Some test cases (the desired result is shown in comments):

> -- readTest == 3
> readTest = runRefTest $ do
>     r <- newRef (3 :: Int)
>     return $ readerToWriter (readRef r)

> -- writeTest == 4
> writeTest = runRefTest $ do
>     r <- newRef (3 :: Int)
>     return $ do
>         writeRef r 4
>         readerToWriter (readRef r)

Nothing special so far.


# References connected by lenses

## Lenses summary

We use Edward Kmett's lens notation.
The needed definitions from the `lens` package are the following:

> -- data type for lenses (simplified form)
> type Lens' a b
>
> -- lens construction with get+set parts
> lens :: (a -> b) -> (a -> b -> a) -> Lens' a b
>
> -- the get part of a lens, arguments flipped
> (^.) :: a -> Lens' a b -> b
>
> -- the set part of a lens, arguments flipped
> set :: Lens' a b -> b -> a -> a
>
> -- data type for isomorphisms (simplified form)
> type Iso' a b
>
> -- iso construction with to+from parts
> iso :: (a -> b) -> (b -> a) -> Iso' a b
>
> -- lens from anything to unit
> united :: Lens' a ()
>
> -- ad-hoc polymorphic tuple element lenses
> _1 :: Lens' (x, y) x
> _1 :: Lens' (x, y, z) x
> _1 :: ...
> _2 :: Lens' (x, y) y
> _2 :: Lens' (x, y, z) y
> _2 :: ...
> _3 :: Lens' (x, y, z) z
> _3 :: Lens' (x, y, z, v) z
> _3 :: ...
> ...
>
> -- function composition can be used for lens composition
> (.) :: Lens' a b -> Lens' b c -> Lens' a c
>
> -- conversion from isomorphisms to lenses is implicit
> id :: Iso' a b -> Lens' a b
>
> -- id is the identity isomorphism (and a lens too)
> id :: Iso' a a

Utility functions used:

> -- flipped fmap
> <&> :: Functor f => f a -> (a -> b) -> f b


### Use of improper lenses

Let `(k :: Lens' A B)`, `(a :: A)`, `(b :: B)` and `(b' :: B)`.
Edward Kmett's three common sense lens laws are the following:

~~~~~ {.haskell}
set k b a ^. k        ==  b            -- set-get
set k (a ^. k) a      ==  a            -- get-set
set k b (set k b' a)  ==  set k b a    -- set-set
~~~~~

The `lensref` library can deal with lenses which do not satisfy the
get-set or the set-set laws.
`lensref` calls these lenses improper lenses and uses the same `Lens'` type
for them.


## Lens application on references

The `lensref` interface has a *lens application on references*:

> -- lens-application
> lensMap :: Lens' a b -> Ref m a -> Ref m b

If references would be implemented as lenses on the program state,
lens application would be the same as function composition (with arguments flipped).
It is not possible to implement references with lenses because of several reasons,
but it is possible to use function composition instead of `lensMap`.
In fact, the current implementation of `lensref` is function composition.
However, this fact is not reflected in the interface because a newtype
wrapper on reference values inhibits this. The newtype wrapper is needed only
to keep the type of references monomorphic.


### Semantics of lens application

Let `(r :: Ref m a)` and `(k :: Lens' a b)`.
`(lensMap k r)` is characterized by the following laws:

-   ~~~~~ {.haskell}
    readRef (lensMap k r)
        ~       -- lensMap-read
    readRef r <&> (^. k)
    ~~~~~

-   For all `(y :: B)`

    ~~~~~ {.haskell}
    writeRef (lensMap k r) y
        ~       -- lensMap-write
    modRef r (flip (set k) y)
    ~~~~~

### Examples

TODO


## Reference extension

Let `(k :: Lens' a b)` and `(q :: Ref m b)`.
*Reference extension*, or *backward lens application*, helps to
create a reference `(r :: Ref m a)` such that `q ~ lensMap k r`:

> -- backward lens application (reference extension)
> extendRef :: Ref m b -> Lens' a b -> a -> RefCreator m (Ref m a)

### Semantics of reference extension

Let `(q :: Ref m b)`, `(k :: Lens' a b)` and `(x :: a)`.
Let `(r :: Ref m a)` the return value of `(extendRef q k x)`.
Let *s* the program state before the creation of `r` and *s'* the program
state after the creation of `r`.
Then the following hold:

-   `q ~ lensMap k r`
-   All references with the exception of `r` have the same value in *s'* as in *s*.
-   The value of `r` (in *s'*) is `(set k y x)` where `y` is the value
    of `q` (in *s* or in *s'*). Note that this is the most meaningful value
    for `r` such that the previous two statements hold.

`extendRef` is called reference extension because the invocation
of `extendRef` extends the program state or the reference state if
we think of references as substates of the program state.

### Examples

TODO


## The `Ref` category

Let `(a :: Ref m A)` and `(b :: Ref m B)`.
We say that `a` and `b` are connected by `(k :: Lens' A B)` iff
`b` ~ `(lensMap r a)`.

Lens connection is a transitive relation and
every reference is connected to itself by the identity lens,
so references as objects and lens connections as morphisms form a category.
Let us call this category `Ref`.

Some properties of the `Ref` category:

-   Terminal object: `(unitRef :: Ref m ())` which is exposed in the `lensref` interface.
-   The program state is an initial object. It can not be typed in Haskell because
    new reference creation changes the type of the program state.
-   Pullbacks up to isomorphism?


# Diagrams

We draw reference diagrams to visualize different type of connections between views of the program state.


## `Hask` diagrams

Reference diagrams are based on diagrams in the `Hask` category.

In `Hask` objects are types and arrows are functions.

### Motivation

Why are `Hask` diagrams useful (compared to source code)?

-   Variable names are not needed.
-   Diagrams may show constraints (see the following diagrams).
-   We decorate `Hask` diagrams to show
    data flow between views in the next section.

Example for constraints shown in diagrams:

~~~~~~~~ {.dot size=1.5}
digraph G {
    rankdir = BT
    x [label = "Integer"]
    y [label = "Integer"]
    x -> y [label="f", constraint=false]
    y -> x [label="g", constraint=false]
}
~~~~~~~~

The diagram shows two `Integer`-typed variables in scope. Let us call them
`x` and `y`. The corresponding source code may be `{y = f x}` or `{x = g y}`
but both of them lacks a constraint shown on the diagram.

Another example:

~~~~~~~~ {.dot size=1.5}
digraph G {
    rankdir = BT
    x [label = "Integer"]
    y [label = "Integer"]
    a [label = "Integer"]
    x -> a [label = "abs"]
    y -> a [label = "abs"]
}
~~~~~~~~

The diagram shows three `Integer`-typed variables in scope.
Let us call them `a`, `x` and `y` from up to down and left to right.
The diagram shows that `a ~ (abs x) ~ (abs y)` (the expressions have
the same behaviour) which cannot be expressed with source code.

### N-ary functions in diagrams

Usually n-ary functions on diagrams are presented in uncurried form with a product domain:

~~~~~~~~ {.dot size=3}
digraph G {
    rankdir = BT
    x [label = "Integer"]
    y [label = "Integer"]
    xy [label = "(Integer, Integer)"]
    a [label = "Bool"]
    b [label = "Bool"]
    xy -> x [label = "fst", constraint=false]
    xy -> y [label = "snd", constraint=false]
    xy -> a [label = "uncurry (==)"]
    a -> b [label = "not"]
}
~~~~~~~~

We allow a different presentation of n-ary functions.
We use a new kind of nodes for this: there are type-nodes and function nodes in the diagram.
The direct predecessors of function nodes are the function arguments. 
The order of arguments matter so the input arrows of function nodes are numbered.
The previous diagram in this presentation:

~~~~~~~~ {.dot size=2}
digraph G {
    rankdir = BT
    x [label = "Integer"]
    y [label = "Integer"]
    a [label = "Bool"]
    b [label = "Bool"]
    Node [margin=0, shape = none, width=0, height=0]
    x -> "==" [label = "1"]
    y -> "==" [label = "2"]
    "==" -> a
    a -> not [label = "1"]
    not -> b
}
~~~~~~~~

### Simplifications

We use several simplification to make the diagrams smaller:

-   A unary function may be presented as an arrow.
-   An arrow number may be hidden if it is inferable or it does not matter.
-   The label of a type node may be hidden if it is inferable.
-   A type node with a hidden label and with one input arrow may be hidden.

The previous diagram with some of the simplifications applied (compare it also
to the initial diagram):

~~~~~~~~ {.dot size=1.5}
digraph G {
    rankdir = BT
    x [label = "Integer"]
    y [label = "Integer"]
    r [label = ""]
    Node [margin=0, shape = none, width=0, height=0]
    x -> "=="
    y -> "=="
    "==" -> r [label = "not"]
}
~~~~~~~~


## Diagram schemes

Diagram schemes help to modularize complex diagrams.

*Diagram schemes* are diagrams in which some nodes are marked as
*parameters*.
Diagram schemes may be *applied* to a cluster of nodes in a diagram which
means that the diagram scheme is instantiated (copied) such that scheme parameters
are identified with the clustered nodes.
Diagram scheme parameters have identifiers to help to identify them in
scheme applications.

Parameters of diagram schemes are shown with a bold outline.
Diagram scheme application is shown with a clustering with a grey outline
and the name of the scheme is show as the label of the clustering in the
left-top corner.
Parameter identifiers are shown with a grey label above the node label.
An example:

~~~~~~~~ {.dot size=2}
digraph G {
    Graph [labeljust = "l", labelloc = "t", fontcolor=gray, pencolor = gray]
    label = "scheme0"
    rankdir = BT
    r [label = <<FONT COLOR="grey">param1</FONT><BR/>A>, penwidth=2]
    a [label = <<FONT COLOR="grey">param2</FONT><BR/>B>, penwidth=2]
    r -> r2 [label = "f"]
    r -> a2 [label = "g"]
    subgraph cluster_a {
        Graph [labeljust = "l", labelloc = "b", fontcolor=gray, pencolor = gray]
        margin = 5
        label = "scheme0"
        r2 [label = <<FONT COLOR="grey">param1</FONT><BR/>A>]
        a2 [label = <<FONT COLOR="grey">param2</FONT><BR/>B>]
    }
}
~~~~~~~~

The diagram shows a diagram scheme called "scheme0" applied to itself
forming an infinite diagram (not very useful in this case).

### Diagram schemes vs. functions

What are the advantages of diagram schemes compared to functions?

Diagrams schemes are more general than functions.

TODO


## Reference-diagrams

We decorate `Hask` diagrams to show
data flow between views.

Three different kind of decorations are applied:

-   Arrow colour will be red in case of some special functions.
-   Arrow style of red arrows may not be plain.
-   Layout of nodes is partially standardized.

### Arrow colouring

Arrows of data-flow functions are coloured red, other arrows are black.
Data flow functions are the following:

-   `lensMap`
-   `readRef`
-   `fmap` for `RefReader` computations
-   `writeRefDyn` (see later)


### Arrow styles

Arrows representing lens application have
an inverted arrow tail to reflect bidirectional data flow between references:

~~~~~~~~ {.dot size=1.5}
digraph G {
    rankdir = BT
    Edge [color=red]
    a [label = "Ref m a"]
    b [label = "Ref m b"]
    Edge [dir = both, arrowtail=inv]
    a -> b [label="lensMap (k :: Lens' a b)"]
}
~~~~~~~~

The arrow of first argument of `writeRefDyn` is drawn
*backwards* and dotted to reflect that
value of the reference is updated occasionally:

~~~~~~~~ {.dot size=2}
digraph G {
    rankdir = BT
    Edge [color=red]
    r [label = "Ref m a"]
    a [label = "RefReader m a"]
    Node [margin=0, shape = none, width=0, height=0]
    w [label = "writeRefDyn"]
    a -> w
    r -> w [dir = back, style = "dashed"]
}
~~~~~~~~

`writeRefDyn` may be seen as an occasional connection between views.


### Layout of nodes

To help to read reference diagrams,
we partially standardize the layout of nodes by the following layout rule:

Let `v` and `w` be views. If `v` determines `w` then `v` cannot be above
`w` in the diagram.

We say that the view `v` *determines* the view `w` if any of the following holds

-   `w ~ (lensMap k v)` for some `k`
-   `w ~ (fmap f v)` for some `f`
-   `w ~ (fmap f $ readRef v)` for some `f`

Because of the layout rule, in case of lens-connection by an isomorphism the references are shown
at the same level to reflect that they determines each-other:

~~~~~~~~ {.dot size=2.5}
digraph G {
    rankdir = BT
    a [label = "Ref m A"]
    b [label = "Ref m B"]
    Edge [color=red]
    Edge [dir = both, arrowtail=inv]
    a -> b [label="lensMap (k :: Iso' A B)", constraint="false"]
}
~~~~~~~~

Another example with `RefReader` computations:

~~~~~~~~ {.dot size=2.5}
digraph G {
    rankdir = BT
    Edge [color=red]
    a [label = "Ref m Int"]
    Node [margin=0, shape = none, width=0, height=0]
    a -> readRef [constraint = false]
    readRef -> "fmap abs"
    "fmap abs" -> "fmap negate" [constraint = false]
    {rank=same; "fmap abs"; "fmap negate"}
}
~~~~~~~~



## Examples

Groups of `Ref`, `RefReader` and `RefWriter` values can
be connected to GUI widgets.[^widgets]
This connections are shown as diagram scheme applications in reference diagrams.

[^widgets]: See the `lgtk` library which is based on `lensref`.

The possible connections are the following:

-   `(RefReader m String)` computations can be connected to dynamic labels.
    The label shows the actual return value of the computation.
-   `(Ref m Bool)` values can be connected to checkboxes.
    Iff the value of the reference is `True`, the checkbox is checked.
    Note that this describes a two-way connection between the checkbox and the program
    state (changing the program state may alter the checkbox and vice-versa).
-   References with basic types like `Int`, `Double` or `String` can be connected to entries.
-   `(RefWriter m ())` computations can be connected to buttons.
    When the button is pressed, the computation is executed.
-   `(RefReader m Bool)` computations can be attached to checkboxes, entries or buttons.
    The widgets are dynamically activated or deactivated whenever the computation returns `True` or `False`, respectively.
-   `(RefReader m String)` computations can be attached to buttons.
    The return value of the computation is shown as a dynamically changing button label.

For example, a Celsius-Fahrenheit converter has two entangled `Double` value entries:

~~~~~~~~ {.dot size=2.5}
digraph G {
    Graph [labeljust = "l", labelloc = "b", fontcolor=gray, pencolor = gray]
    Edge [color=red]
    rankdir = BT
    Edge [dir = both, arrowtail=inv]
    b1 -> b2 [label="lensMap\ncelsiusToFahrenheit"; constraint="false"]
    subgraph cluster_entry1 {
        margin = 5
        label = "entry"
        b1 [label = ""]
    }
    subgraph cluster_entry2 {
        margin = 5
        label = "entry"
        b2 [label = ""]
    }
}
~~~~~~~~

> celsiusToFahrenheit :: Iso' Double Double
> celsiusToFahrenheit = multiplying 1.8 . adding 32


A simple counter has an integer label and a button (here the reference `c` was converted implicitly to a `RefReader`
value by `readRef`):

~~~~~~~~ {.dot size=2.5}
digraph G {
    Graph [labeljust = "l", labelloc = "b", fontcolor=gray, pencolor = gray]
    rankdir = BT
    Edge [color=red]
    c [label = "Ref m Int"]
    Node [margin=0, shape = none, width=0, height=0]
    c -> cv [constraint=false]
    cv -> b [label = "fmap\n(+1)"]
    cv -> cvs [constraint=false]
    Edge [dir = back, style=dashed]
    c -> b
    cv [label = "readRef"]
    subgraph cluster_label {
        margin = 5
        label = "label"
        cvs [label="fmap show"]
    }
    subgraph cluster_button {
        margin = 5
        label = "button"
        b [label = "writeRefDyn"]
    }
}
~~~~~~~~

In a bit more complex example a `(Maybe Int)` value editor is shown.
Notice that the input reference is extended
to remember the entry value when the user deactivates and re-activates the entry
by clicking the checkbox twice.

~~~~~~~~ {.dot size=4}
digraph G {
    Graph [labeljust = "l", labelloc = "t", fontcolor=gray, pencolor = gray]
    Edge [color=red]
    label="maybeeditor"
    rankdir = BT
//    "main program state" -> "substate ::\nMaybe Int" [label = "k"]
    r [label = "Ref m (Bool, Int)"]
    q [label = "Ref m (Maybe Int)", penwidth=2]  
    Node [margin=0, shape = none, width=0, height=0]
    Edge [dir = both, arrowtail=inv]
    r -> q [xlabel = "lensMap\nmaybeLens"]
    r -> "checkbox"
    r -> entryActive [dir = "forward"]
    r -> entryValue
    subgraph cluster_checkbox {
        Graph [labeljust = "l", labelloc = "b", fontcolor=gray, pencolor = gray]
        margin = 5
        label = "checkbox"
        checkbox [label = "lensMap _1"]
        }
    subgraph cluster_entry {
        Graph [labeljust = "l", labelloc = "b", fontcolor=gray, pencolor = gray]
        margin = 5
        label = "entry"
        entryValue [label = "lensMap _2"]
        entryActive [label=<<FONT COLOR="grey">active</FONT><BR/>fmap fst . readRef>]
    }
}
~~~~~~~~

> -- improper lens: set-set law is violated
> maybeLens :: Lens' (Bool, a) (Maybe a)
> maybeLens = lens get set
>   where
>     get (True, a) = Just a
>     get _ = Nothing
>     set (_, a) = maybe (False, a) ((,) True)



# Reference join


## Semantics


## Examples


# Dynamic network creation

## Dependency relation

*Dependency* is binary relation between reference
reading computations and references.

### Motivation

Let `(w :: RefWriter m ())` and let `v` be a reference reader computation.
Given a program state, we say that `v` is *sensitive* to `w`
if executing `w` changes the value of `v`.

Sensitivity is not computable in general because equality check is not computable.[^valuechange]
Dependency is a computable approximate sensitivity relation.

[^valuechange]: Consider `(v :: RefReader (Integer -> Integer))`.
It is not possible to check the equality of two values of `v`.

### Semantics

Defining rules for dependency for a given program state *s*:

-   `(readRef r)` depends on `r`
-   `v` depends on `(lensMap k r)` if `v` depends on `r`
-   `(v >>= f)` depends on `r` if either `v` depends on `r` or
    `(f a)` depends on `r` where `a` is the value of `r` in *s*

TODO:
extendRef
currentValue
joinRef
onChange

### Examples

TODO

## Reactions

### Motivation

We want to bind reactions to changes of program state views.

What kind of reactions are appropriate?

-   creation of new references
-   outer effects
-   reference write **should be avoided** because
    it could cause circles in the execution of reactions

=> Reference creation computations

`onChange`

Outer effects may not cause circles because ...

### Semantics

Register all onChange actions

Whenever `writeRef r a` happens,
do all dependent actions in registration order


### Examples




# Resource handling

- onRegionStatusChange

# Implementation / Cost semantics

# Old stuff

## How to apply a lens to an `IORef`?

Application of a lens to an `IORef` is only possible with a modified `IORef` definition:

> type IORef' a = (IO a, a -> IO ())

`IORef'`s still can be created, read and written:

> readIORef' :: IORef' a -> IO a
> readIORef' = fst

> writeIORef' :: IORef' a -> a -> IO ()
> writeIORef' = snd

> newIORef' :: a -> IO (IORef' a)
> newIORef' a = do
>     r <- newIORef a
>     return (readIORef r, writeIORef r)

Lens application is now also possible:

> lensMap :: Lens' a b -> IORef' a -> IORef' b
> lensMap (get, set) (read, write) =
>     ( fmap get read
>     , \b -> do
>          a <- read
>          write $ set a b
>     )

## Usage example

A simple example how to use `lensMap`:

> main = do
>     r <- newIORef' ((1,"a"),True)
>     let r' = lensMap (_1 . _2) r
>     writeIORef' r' "b"

The values of `r` and `r'` are connected: whenever `r` is written `r'` changes
and whenever `r'` is written `r` changes.
At any time the following holds:

> rv' = rv ^. _1 . _2

where `rv` and `rv'` are the actual values of `r` and `r'`, respectively.

## What is `lensMap` good for?

It seems natural that if we have a reference to a state,
we can build a reference to a substate of the state.
I claim that `lensMap` allows to write code easier to compose.
I give a try to verify my claim in the summary section.




# Joining a reference

By joining a reference I mean the following operation:

> joinRef :: IO (IORef' a) -> IORef' a

## What is `joinRef` good for?

Suppose we have `mb :: IO Bool` and `r1, r2 :: IORef' Int`.
With `joinRef` we can make a reference `r` which acts like `r1`
or `r2` depending on the *actual* value of `mb`.

> r :: IORef' Int
> r = joinRef $ do
>     b <- mb
>     return $ if b then r1 else r2

`joinRef` allows more than just switching between two references
dynamically. One can build a network of references with `lensMap` and
make this network fully dynamic with `joinRef`.

## Why is it called `joinRef`?

I call it `joinRef` because with another definition of `IORef'`, `Control.Monad.join` acts like `joinRef`!

> type IORef'' a = IO (a, a -> IO ())

`IORef''` is isomorphic to `IORef'`:

> convTo :: IORef' a -> IORef'' a
> convTo (read, write) = do
>     a <- read
>     return (a, write)

> convFrom :: IORef'' a -> IORef' a
> convFrom r =
>     ( fmap fst r
>     , \a -> do
>         (_, write) <- r
>         write a
>     )

`joinRef` is `join`:

> joinRef :: IO (IORef'' a) -> IORef'' a
> joinRef = join



# Backward application of a lens to a reference

By backward lens application I mean the following operation:

> extRef :: IORef' b -> Lens a b -> a -> IO (IORef' a)

## Why is it called `extRef`? How is it backward lens application?

It is called `extRef` because an existing program state can be *extended* with it.
Suppose that `r :: IORef' Int`. Suppose that we would like to double the possible
values of `r`, i.e. we would like to extend the state referenced by `r` with
a `Bool` value. We can do it with the following definition:

> r :: IORef' Int
> r = ...

> do
>     (r' :: IORef' (Int, Bool)) <- extRef r _1 (0, False)

The third parameter of `extRef` is needed to find an initial value of `r'`. If
the value of `r` is `15` at the creation time of `r'` then the initial
value of `r'` is `(15, False)`.

The values of `r` and `r'` remain connected: whenever `r` is written `r'` changes
and whenever `r'` is written `r` changes.
The connection between `r` and `r'` is exactly the same as if `r'` was created
first and `r` was defined by

> r :: IORef' Int
> r = lensMap _1 r'

In this sense `extRef` is the inverse of `lensMap` and this is why I call it backward
lens application.



## Implementation of `extRef`

It turns out that `extRef` cannot be defined with the previous definitions of `IORef'`.
It can be defined on this modified `IORef'` data structure instead:

> data IORef''' a = IORef''
>     { readRef          :: IO a
>     , writeRef         :: a -> IO ()
>     , registerCallback :: IO () -> IO ()
>     }

`registerCallback` takes and `IO` action and stores it (there is one store per reference).
`writeRef` calls all the stored actions after setting the reference value.
We do not go into further details here.
The source code of a complete implementation can be found in ...


## Multiple monads for reference operations

The return type of `extRef` is `IO (IORef' a)` which
can be turned into `IORef' a` by `joinRef`:

> joinedExtRef :: IORef' b -> Lens a b -> a -> IORef' a
> joinedExtRef r k a = joinRef (extRef r k a)

In fact `joinedExtRef r k a` is quite useless and it behaves wrongly (setting its value
me have no effect).
We would like to disallow this combination of `extRef` and `joinRef`,
therefore we introduce different monad layers in which different reference actions are allowed.

So far the following three monad layers turned out to be handy to work with:

monad layer   allowed actions
------------- ----------------------------------
ReadRef       reference read
CreateRef     reference read and creation
WriteRef      reference read, creation and write
------------- ----------------------------------

From now on, we replace `IO` by either `ReadRef` or `CreateRef` or `WriteRef`.
We replace `IORef'` by `Ref` too.

In the new system `joinRef` has limited availability:

> joinRef :: ReadRef (Ref a) -> Ref a

The result of `extRef` is in the `CreateRef` monad:

> extRef :: Ref b -> Lens a b -> a -> CreateRef (Ref a)

Thus `joinRef` cannot be applied after `extRef` and the above puzzle is solved.


## `newRef` as a special case of `extRef`

Before making a summay, notice that
`extRef` is so strong that `newRef` can be expressed in terms of it:

> newRef :: a -> CreateRef (Ref a)
> newRef = extRef unitRef united

Here `unitRef` can be any reference which has type `Ref ()`.

We add `unitRef` to the set of basic reference operations (it is a constant):

> unitRef :: Ref ()


## Summary so far

The discussed data types and operations so far are the following:

> Ref       :: * -> *
> ReadRef   :: * -> *   -- instance of Monad
> CreateRef :: * -> *   -- instance of Monad
> WriteRef  :: * -> *   -- instance of Monad

> liftReadRef   :: ReadRef a   -> CreateRef a
> liftCreateRef :: CreateRef a -> WriteRef a

> unitRef  :: Ref ()
> lensMap  :: Lens' a b -> Ref a -> Ref b
> readRef  :: Ref a -> ReadRef a
> joinRef  :: ReadRef (Ref a) -> Ref a
> extRef   :: Ref b -> Lens' a b -> a -> CreateRef (Ref a)
> writeRef :: Ref a -> a -> WriteRef ()

`liftReadRef` is handy because during reference creation we can read existing references.

`liftCreateRef` is handy because during reference write we can create references
(a use case is to create a new reference and give it as a value of a reference-reference).


# Connecting events to reference change

This operation is the last big step into the direction of a fully working FRP system:

> onChange :: Eq a => ReadRef a -> (a -> CreateRef b) -> CreateRef (ReadRef b)



> onChange :: ReadRef (CreateRef b) -> CreateRef (ReadRef b)


## Semantics with examples

TODO


## Variations

> onChangeMemo :: Eq a => ReadRef a -> (a -> CreateRef (CreateRef b)) -> CreateRef (ReadRef b)

> onChangeAcc :: Eq a => b -> ReadRef a -> (b -> a -> CreateRef b) -> CreateRef (ReadRef b)


TODO


# Bindings to outer actions

    registerCallback :: Functor f => f (Modifier m ()) -> m (f (EffectM m ()))


> liftEffect :: ... a -> CreateRef a

## Resource handling

    onRegionStatusChange :: (RegionStatusChange -> m ()) -> m ()

data RegionStatusChange = Kill | Block | Unblock deriving (Eq, Ord, Show)

TODO


# Summary

TODO

## Comparison to existing Haskell FRP frameworks

reactive
reactive-banana
Elerea
FranTk
Sodium
Elm
netwire
yampa
iTask

TODO


## Extra diagrams


~~~~~~~~ {.dot}
digraph G {
    rankdir = BT
    Edge [arrowtail=inv, dir=both]
    A -> C [label = "k"]
    B -> C [label = "l"]
    Edge [style = dashed]
    D [style = dashed]
    D -> A [label = "k'"]
    D -> B [label = "l'"]
    A [label = "a :: A"]
    B [label = "b :: B"]
    C [label = "c :: C"]
    D [label = "d :: D"]
}
~~~~~~~~



~~~~~~~~ {.dot}
digraph G {
    rankdir = BT
    Edge [arrowtail=inv, dir=both]
    a -> b
    b -> c
    d -> b
    d -> e
}
~~~~~~~~

~~~~~~~~ {.dot}
digraph G {
    rankdir = BT
    Edge [arrowtail=inv, dir=both]
    Edge [style = dashed]
    x [style = dashed]
    x -> a
    x -> b
    x -> c
    x -> d
    x -> e
    x [label = "program state"]
}
~~~~~~~~



